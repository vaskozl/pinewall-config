# Adapted from: https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_home_router
flush ruleset

define DEV_PRIVATE = eth0
define DEV_WORLD = eth1
define DEV_WG = wg0
define DEV_GUEST = guest
define DEV_IOT = iot

define NET_PRIVATE = 192.168.0.0/16
define NET_PODCIDR = 10.244.0.0/16

define IP_EING = 192.168.99.4
define IP_MQTT = 192.168.99.9
define IP_MAIL = 192.168.99.33
define IP_IRC  = 192.168.99.11

define IP_SYNO = 192.168.1.108

define IP_KAPI = 192.168.1.8

define SMART_SPEAKERS = {
    192.168.107.10, # Google Living
    192.168.107.11, # Google Bathroom
    192.168.107.12, # Lenovo Bedroom
}

define IOT_WITH_EGRESS = {
    $SMART_SPEAKERS,
    192.168.107.30, # Washer-Dryer
    192.168.107.31, # Dreame L10
    192.168.107.32, # Samsung TV
    192.168.107.33, # Bosch-Dishwasher
}

table ip global {
    chain inbound_world {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

        ip protocol . th dport vmap {
            udp . 51820 : accept, # wireguard
        }
    }

    chain inbound_guest {
        # allow DHCP and DNS from the private network
        ip protocol . th dport vmap {
            udp . 53 : accept,
            tcp . 53 : accept,
            udp . 67 : accept,
        }

        jump inbound_world
    }

    chain inbound {
        type filter hook input priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept }

        # allow loopback traffic, anything else jump to chain for further evaluation
        iifname vmap {
            lo           : accept,
            $DEV_PRIVATE : accept,
            $DEV_WG      : accept,
            $DEV_IOT     : jump inbound_guest,
            $DEV_GUEST   : jump inbound_guest,
            $DEV_WORLD   : jump inbound_world,
        }

        # the rest is dropped by the default policy
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        # connections from the internal net to the internet or to other
        # internal nets are allowed
        iifname $DEV_PRIVATE accept
        iifname $DEV_WG accept

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # Accept everything that came through destination nat
        ct status dnat accept

        # Guest is only allowed internet accesss
        iifname $DEV_GUEST oifname $DEV_WORLD accept

        # Allow traffic to mosquitto from IOT
        iifname $DEV_IOT ip daddr $IP_MQTT accept
        iifname $DEV_IOT ip daddr $NET_PODCIDR tcp dport 1883 accept

        # Smart speakers need to be able to speak to hass for TTS
        ip saddr $SMART_SPEAKERS ip daddr $IP_EING iifname $DEV_IOT accept

        # IOT devices don't have internet by default but some need it
        ip saddr $IOT_WITH_EGRESS oifname $DEV_WORLD accept

        # the rest is dropped by the default policy
    }
}

table ip nat {
    chain prerouting {
        type nat hook prerouting priority 0;
        fib daddr type local dnat ip to meta l4proto . th dport map {
            tcp . smtp  : $IP_KAPI . 31025,
            tcp . http  : $IP_KAPI . 31080,
            tcp . https : $IP_KAPI . 31443,
            tcp . 16989 : $IP_SYNO . 16989,
            udp . 16989 : $IP_SYNO . 16989,
        }
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;

        # masquerade outgoing connections
        ip saddr $NET_PRIVATE oifname $DEV_WORLD masquerade
        # masquerade hairpinned connections
        ip saddr $NET_PRIVATE ip daddr $NET_PRIVATE ct status dnat masquerade
    }
}
